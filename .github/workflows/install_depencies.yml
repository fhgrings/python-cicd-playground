name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  
jobs:
  define_variables:
    runs-on: ubuntu-latest
    environment: 
      name: dev
    outputs:
      url: ${{ steps.step1.outputs.url }}
    steps:
    - name: Read output
      id: step1
      run: |
        echo "URL=${{ vars.URL }}" >> $GITHUB_OUTPUT
        
  check_secrets:
    runs-on: ubuntu-latest
    needs: [define_variables]
    steps:
    - name: Check AWS Secrets availability
      run: |
        echo "Checking AWS Secrets for ${{ vars.URL }}"
        echo "Vars from define_variables ${{ needs.define_variables.outputs.url }}"
        
  test_n_lint:
    runs-on: ubuntu-latest
    needs: [check_secrets]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-json-ctrf
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics    
    - name: Test with pytest
      run: |
        export GIT_SHORT_COMMIT=$(git rev-parse --short HEAD)
        echo $GIT_SHORT_COMMIT
        pytest -vv --ctrf ./test/report.json
    - name: Upload artifact
      uses: actions/upload-artifact@v4 # Use the latest version
      with:
        name: test-report # Name of the artifact
        path: ./test/report.json # Path to the file or directory to upload
        retention-days: 7 # How long to keep the artifact (default is 90 days or repository setting)
  scan_secrets_n_vulns:
    runs-on: ubuntu-latest
    needs: [check_secrets]
    steps:
    - uses: github/codeql-action/init@v3
      with:
        languages: python
  report:
    name: Reporting pytest
    runs-on: ubuntu-latest
    needs: [check_secrets,test_n_lint]
    steps:
    - uses: actions/download-artifact@v5
      with:
        name: test-report
        path: ./test
    - name: Publish Test Report
      uses: ctrf-io/github-test-reporter@v1
      with:
        report-path: './test/*.json'
        pull-request: true
        update-comment: true
        comment-tag: '${{ github.workflow }}-${{ github.job }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: always()
  deploy:
    name: Deploy to env
    runs-on: ubuntu-latest
    needs: [report,scan_secrets_n_vulns]
    environment: 
      name: dev
    steps:
    - name: Deploying to Prod
      run: |
        echo "Deploying to prod..."
